package part2.web;

import java.util.Collections;

import java.util.LinkedHashMap;
import java.util.Map;

public class HttpResponseImpl implements HttpResponse {
    private String protocol;
    private int statusCode;
    private Map<String, String> headers;
    private byte[] content;

    public HttpResponseImpl() {
        this.headers = new LinkedHashMap<>();
        this.content = new byte[0];
    }

    public String getProtocol() {
        return this.protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    @Override
    public int getStatusCode() {
        return this.statusCode;
    }

    @Override
    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }

    @Override
    public Map<String, String> getHeaders() {
        return Collections.unmodifiableMap(this.headers);
    }


    @Override
    public byte[] getContent() {
        return this.content.clone();
    }

    @Override
    public void setContent(byte[] content) {

        this.content = content.clone();
    }


    @Override
    public byte[] getBytes() {            //should return the whole response (ResponseLine + Headers + Content) as byte array.
        StringBuilder sb = new StringBuilder();
        sb.append(this.getProtocol()).append(" ");
        switch (this.getStatusCode()) {
            case 200:
                sb.append("200 OK");
                break;
            case 400:
                sb.append("400 Bad Request");
                break;
            case 401:
                sb.append("401 Unauthorized");
                break;
            case 404:
                sb.append("404 Not Found");
                break;
        }
        sb.append(System.lineSeparator());
        this.getHeaders()
                .forEach((key,value)->sb.append(key).append(": ").append(value).append(System.lineSeparator()));
        sb.append(System.lineSeparator()).append(new String(this.getContent()));


        return sb.toString().getBytes();
    }


    @Override
    public void addHeader(String header, String value) {
        if(!header.equals("Authorization")){
            this.headers.put(header,value);
        }
    }
}
